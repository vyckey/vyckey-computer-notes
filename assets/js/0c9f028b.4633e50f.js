"use strict";(self.webpackChunkvyckey_computer_notes=self.webpackChunkvyckey_computer_notes||[]).push([[9441],{16955:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>s,default:()=>c,frontMatter:()=>r,metadata:()=>l,toc:()=>d});var i=t(74848),a=t(28453);const r={title:"Heap",tags:["algorithm","heap"],sidebar_label:"Heap",sidebar_position:5},s="Heap",l={id:"algorithm/tree/heap",title:"Heap",description:"\u5806\uff08Heap\uff09\u662f\u4e00\u79cd\u7279\u6b8a\u7684\u4e8c\u53c9\u6811\uff0c\u5806\u4e2d\u7684\u6bcf\u4e00\u4e2a\u8282\u70b9\u503c\u90fd\u5927\u4e8e\u7b49\u4e8e\uff08\u6216\u5c0f\u4e8e\u7b49\u4e8e\uff09\u5b50\u6811\u4e2d\u6240\u6709\u8282\u70b9\u7684\u503c\u3002\u6216\u8005\u8bf4\uff0c\u4efb\u610f\u4e00\u4e2a\u8282\u70b9\u7684\u503c\u90fd\u5927\u4e8e\u7b49\u4e8e\uff08\u6216\u5c0f\u4e8e\u7b49\u4e8e\uff09\u6240\u6709\u5b50\u8282\u70b9\u7684\u503c\u3002",source:"@site/docs/algorithm/tree/heap.md",sourceDirName:"algorithm/tree",slug:"/algorithm/tree/heap",permalink:"/docs/algorithm/tree/heap",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/algorithm/tree/heap.md",tags:[{label:"algorithm",permalink:"/docs/tags/algorithm"},{label:"heap",permalink:"/docs/tags/heap"}],version:"current",sidebarPosition:5,frontMatter:{title:"Heap",tags:["algorithm","heap"],sidebar_label:"Heap",sidebar_position:5},sidebar:"tutorialSidebar",previous:{title:"Tree Algorithm",permalink:"/docs/algorithm/tree/"},next:{title:"BST, AVL, RBT",permalink:"/docs/algorithm/tree/bst"}},o={},d=[{value:"\u539f\u7406\u4ecb\u7ecd",id:"\u539f\u7406\u4ecb\u7ecd",level:2},{value:"\u81ea\u9876\u5411\u4e0b\u5806\u5316",id:"\u81ea\u9876\u5411\u4e0b\u5806\u5316",level:3},{value:"\u81ea\u9876\u5411\u4e0a\u5806\u5316",id:"\u81ea\u9876\u5411\u4e0a\u5806\u5316",level:3},{value:"\u6784\u5efa\u5806",id:"\u6784\u5efa\u5806",level:3},{value:"\u5220\u9664\u5143\u7d20",id:"\u5220\u9664\u5143\u7d20",level:3},{value:"\u65b0\u589e\u5143\u7d20",id:"\u65b0\u589e\u5143\u7d20",level:3},{value:"\u5806\u6392\u5e8f",id:"\u5806\u6392\u5e8f",level:3},{value:"\u4ee3\u7801\u5b9e\u73b0",id:"\u4ee3\u7801\u5b9e\u73b0",level:2},{value:"\u53c2\u8003\u8d44\u6599",id:"\u53c2\u8003\u8d44\u6599",level:2}];function p(e){const n={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h1,{id:"heap",children:"Heap"}),"\n",(0,i.jsx)(n.p,{children:"\u5806\uff08Heap\uff09\u662f\u4e00\u79cd\u7279\u6b8a\u7684\u4e8c\u53c9\u6811\uff0c\u5806\u4e2d\u7684\u6bcf\u4e00\u4e2a\u8282\u70b9\u503c\u90fd\u5927\u4e8e\u7b49\u4e8e\uff08\u6216\u5c0f\u4e8e\u7b49\u4e8e\uff09\u5b50\u6811\u4e2d\u6240\u6709\u8282\u70b9\u7684\u503c\u3002\u6216\u8005\u8bf4\uff0c\u4efb\u610f\u4e00\u4e2a\u8282\u70b9\u7684\u503c\u90fd\u5927\u4e8e\u7b49\u4e8e\uff08\u6216\u5c0f\u4e8e\u7b49\u4e8e\uff09\u6240\u6709\u5b50\u8282\u70b9\u7684\u503c\u3002"}),"\n",(0,i.jsx)(n.p,{children:"\u5982\u4e0b\u56fe\u6240\u793a\uff0c\u5de6\u8fb9\u662f\u5927\u9876\u5806\uff0c\u53f3\u8fb9\u662f\u5c0f\u9876\u5806\u3002"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{src:t(39829).A+"",width:"1264",height:"386"})}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"\u5806\u4e0d\u4e00\u5b9a\u662f\u5b8c\u5168\u4e8c\u53c9\u6811"})}),"\n",(0,i.jsx)(n.p,{children:"\u4e8c\u53c9\u5806\u662f\u4e00\u4e2a\u6570\u7ec4\uff0c\u5b83\u53ef\u4ee5\u88ab\u770b\u6210\u662f\u4e00\u4e2a \u8fd1\u4f3c\u7684\u5b8c\u5168\u4e8c\u53c9\u6811\u3002\u6590\u6ce2\u90a3\u5951\u5806\u548c\u4e8c\u9879\u5806\u5c31\u4e0d\u662f\u5b8c\u5168\u4e8c\u53c9\u6811\uff0c\u5b83\u4eec\u751a\u81f3\u90fd\u4e0d\u662f\u4e8c\u53c9\u6811\u3002"}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"\u539f\u7406\u4ecb\u7ecd",children:"\u539f\u7406\u4ecb\u7ecd"}),"\n",(0,i.jsx)(n.h3,{id:"\u81ea\u9876\u5411\u4e0b\u5806\u5316",children:"\u81ea\u9876\u5411\u4e0b\u5806\u5316"}),"\n",(0,i.jsx)(n.h3,{id:"\u81ea\u9876\u5411\u4e0a\u5806\u5316",children:"\u81ea\u9876\u5411\u4e0a\u5806\u5316"}),"\n",(0,i.jsx)(n.h3,{id:"\u6784\u5efa\u5806",children:"\u6784\u5efa\u5806"}),"\n",(0,i.jsx)(n.h3,{id:"\u5220\u9664\u5143\u7d20",children:"\u5220\u9664\u5143\u7d20"}),"\n",(0,i.jsx)(n.h3,{id:"\u65b0\u589e\u5143\u7d20",children:"\u65b0\u589e\u5143\u7d20"}),"\n",(0,i.jsx)(n.h3,{id:"\u5806\u6392\u5e8f",children:"\u5806\u6392\u5e8f"}),"\n",(0,i.jsx)(n.h2,{id:"\u4ee3\u7801\u5b9e\u73b0",children:"\u4ee3\u7801\u5b9e\u73b0"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",metastring:'showLineNumbers title="Heap.java"',children:"import java.util.AbstractList;\nimport java.util.ArrayList;\nimport java.util.Comparator;\nimport java.util.List;\nimport java.util.NoSuchElementException;\n\npublic class Heap<E> extends AbstractList<E> {\n    private final List<E> elements;\n    private final Comparator<E> comparator;\n\n    protected Heap(List<E> elements, Comparator<E> comparator) {\n        this.elements = elements;\n        this.comparator = comparator;\n        build();\n    }\n\n    public static <E> Heap<E> heap(List<E> elements, Comparator<E> comparator) {\n        return new Heap<>(elements, comparator);\n    }\n\n    public static <E extends Comparable<E>> Heap<E> minHeap(List<E> elements) {\n        return new Heap<>(elements, Comparator.naturalOrder());\n    }\n\n    public static <E extends Comparable<E>> Heap<E> maxHeap(List<E> elements) {\n        return new Heap<>(elements, Comparator.reverseOrder());\n    }\n\n    @Override\n    public int size() {\n        return elements.size();\n    }\n\n    @Override\n    public E get(int index) {\n        return elements.get(index);\n    }\n\n    private int compare(int i, int j) {\n        return comparator.compare(get(i), get(j));\n    }\n\n    private void build() {\n        // \u4ece\u975e\u53f6\u5b50\u8282\u70b9\u8fdb\u884c\u5806\u5316\n        for (int i = (size() - 2) >> 1; i >=0; i--) {\n            heapify(i);\n        }\n    }\n\n    /**\n     * \u4ece{@code nodeIdx}\u4f4d\u7f6e\u81ea\u9876\u5411\u4e0b\u8fdb\u884c\u5806\u5316\n     * \n     * @param nodeIdx \u5f00\u59cb\u4f4d\u7f6e\n     */\n    private void heapify(int nodeIdx) {\n        boolean again = true;\n        while (again) {\n            int leftIdx = (nodeIdx << 1) + 1, rightIdx = leftIdx + 1;\n            if (rightIdx < size() && compare(leftIdx, rightIdx) > 0) {\n                if (compare(nodeIdx, rightIdx) > 0) {\n                    // \u53f3\u5b69\u5b50\u66f4\u5c0f\n                    swap(nodeIdx, rightIdx);\n                    nodeIdx = rightIdx;\n                } else {\n                    again = false;\n                }\n            } else if (leftIdx < size() && compare(nodeIdx, leftIdx) > 0) {\n                // \u5de6\u5b69\u5b50\u66f4\u5c0f\n                swap(nodeIdx, leftIdx);\n                nodeIdx = leftIdx;\n            } else {\n                again = false;\n            }\n        }\n    }\n\n    public E remove() {\n        if (isEmpty()) {\n            throw new NoSuchElementException();\n        }\n        E removed = get(0);\n        if (size() > 1) {\n            elements.set(0, elements.removeLast());\n            heapify(0);\n        } else {\n            elements.remove(0);\n        }\n        return removed;\n    }\n\n    @Override\n    public boolean add(E element) {\n        elements.add(element);\n        // \u81ea\u4f4e\u5411\u4e0a\u5806\u5316\n        int childIdx = size() - 1;\n        while (childIdx > 0) {\n            int nodeIdx = (childIdx - 1) >> 1;\n            if (compare(nodeIdx, childIdx) > 0) {\n                swap(childIdx, nodeIdx);\n                childIdx = nodeIdx;\n            } else {\n                break;\n            }\n        }\n        return true;\n    }\n\n    private void swap(int i, int j) {\n        E e = get(i);\n        elements.set(i, get(j));\n        elements.set(j, e);\n    }\n\n    public static <E> void sort(List<E> elements, Comparator<E> comparator) {\n        Heap<E> heap = new Heap<>(new ArrayList<>(elements), comparator.reversed());\n        int i = elements.size() - 1;\n        while (!heap.isEmpty()) {\n            // \u603b\u662f\u79fb\u9664\u6700\u5927\u5143\u7d20\n            elements.set(i--, heap.remove());\n        }\n    }\n}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"\u53c2\u8003\u8d44\u6599",children:"\u53c2\u8003\u8d44\u6599"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://zh.wikipedia.org/wiki/%E5%A0%86%E7%A9%8D",children:"Wikipedia - \u5806"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://javaguide.cn/cs-basics/data-structure/heap.html",children:"JavaGuide - \u5806"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://pdai.tech/md/algorithm/alg-sort-x-heap.html",children:"Java \u5168\u6808\u77e5\u8bc6\u4f53\u7cfb - \u5806\u6392\u5e8f(Heap Sort)"})}),"\n"]})]})}function c(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(p,{...e})}):p(e)}},39829:(e,n,t)=>{t.d(n,{A:()=>i});const i=t.p+"assets/images/heap-9eaa25dc756375da84de2c5cffcc6988.png"},28453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>l});var i=t(96540);const a={},r=i.createContext(a);function s(e){const n=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:s(e.components),i.createElement(r.Provider,{value:n},e.children)}}}]);