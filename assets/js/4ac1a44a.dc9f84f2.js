"use strict";(self.webpackChunkvyckey_computer_notes=self.webpackChunkvyckey_computer_notes||[]).push([[3888],{83418:(n,i,t)=>{t.r(i),t.d(i,{assets:()=>o,contentTitle:()=>s,default:()=>h,frontMatter:()=>a,metadata:()=>l,toc:()=>d});var r=t(74848),e=t(28453);const a={title:"Sort",tags:["sort"],sidebar_label:"Sort",sidebar_position:10},s="\u6392\u5e8f",l={id:"algorithm/sort",title:"Sort",description:"\u6392\u5e8f\u7b97\u6cd5",source:"@site/docs/algorithm/sort.md",sourceDirName:"algorithm",slug:"/algorithm/sort",permalink:"/docs/algorithm/sort",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/algorithm/sort.md",tags:[{label:"sort",permalink:"/docs/tags/sort"}],version:"current",sidebarPosition:10,frontMatter:{title:"Sort",tags:["sort"],sidebar_label:"Sort",sidebar_position:10},sidebar:"tutorialSidebar",previous:{title:"Random",permalink:"/docs/algorithm/random"},next:{title:"Problems",permalink:"/docs/algorithm/problems/"}},o={},d=[{value:"\u6392\u5e8f\u7b97\u6cd5",id:"\u6392\u5e8f\u7b97\u6cd5",level:2},{value:"\u5192\u6ce1\u6392\u5e8f",id:"\u5192\u6ce1\u6392\u5e8f",level:3},{value:"\u9009\u62e9\u6392\u5e8f",id:"\u9009\u62e9\u6392\u5e8f",level:3},{value:"\u63d2\u5165\u6392\u5e8f",id:"\u63d2\u5165\u6392\u5e8f",level:3},{value:"\u5e0c\u5c14\u6392\u5e8f",id:"\u5e0c\u5c14\u6392\u5e8f",level:3},{value:"\u5feb\u901f\u6392\u5e8f",id:"\u5feb\u901f\u6392\u5e8f",level:3},{value:"\u5f52\u5e76\u6392\u5e8f",id:"\u5f52\u5e76\u6392\u5e8f",level:3},{value:"\u6876\u6392\u5e8f",id:"\u6876\u6392\u5e8f",level:3},{value:"\u8ba1\u6570\u6392\u5e8f",id:"\u8ba1\u6570\u6392\u5e8f",level:3},{value:"\u57fa\u6570\u6392\u5e8f",id:"\u57fa\u6570\u6392\u5e8f",level:3},{value:"\u53c2\u8003\u8d44\u6599",id:"\u53c2\u8003\u8d44\u6599",level:2}];function c(n){const i={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,e.R)(),...n.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(i.h1,{id:"\u6392\u5e8f",children:"\u6392\u5e8f"}),"\n",(0,r.jsx)(i.h2,{id:"\u6392\u5e8f\u7b97\u6cd5",children:"\u6392\u5e8f\u7b97\u6cd5"}),"\n",(0,r.jsx)(i.h3,{id:"\u5192\u6ce1\u6392\u5e8f",children:"\u5192\u6ce1\u6392\u5e8f"}),"\n",(0,r.jsx)(i.p,{children:"\u6392\u5e8f\u601d\u60f3\uff1a\u4e24\u4e24\u5143\u7d20\u6bd4\u8f83\uff0c\u5927\u7684\u901a\u8fc7\u4ea4\u6362\u4f4d\u7f6e\u653e\u540e\u9762\uff0c\u6bcf\u8f6e\u5b8c\u6210\u6700\u5927\u5143\u7d20\u5728\u6700\u53f3\u8fb9\uff0c\u591a\u8f6e\u5904\u7406\u76f4\u5230\u6709\u5e8f\u3002"}),"\n",(0,r.jsx)(i.h3,{id:"\u9009\u62e9\u6392\u5e8f",children:"\u9009\u62e9\u6392\u5e8f"}),"\n",(0,r.jsx)(i.p,{children:"\u6392\u5e8f\u601d\u60f3\uff1a\u6bcf\u6b21\u9009\u53d6\u6700\u5927\u7684\u5143\u7d20\u653e\u5230\u6700\u53f3\u8fb9\uff08\u6216\u6700\u5c0f\u5143\u7d20\u653e\u5de6\u8fb9\uff09\uff0c\u591a\u8f6e\u5904\u7406\u76f4\u5230\u6709\u5e8f\u3002"}),"\n",(0,r.jsx)(i.h3,{id:"\u63d2\u5165\u6392\u5e8f",children:"\u63d2\u5165\u6392\u5e8f"}),"\n",(0,r.jsx)(i.p,{children:"\u6392\u5e8f\u601d\u60f3\uff1a\u6bcf\u6b21\u5904\u7406\u4e00\u4e2a\u5143\u7d20\uff0c\u5f80\u524d\u63d2\u5165\u524d\u9762\u7684\u6709\u5e8f\u5b50\u5e8f\u5217\uff0c\u76f4\u5230\u904d\u5386\u5904\u7406\u5b8c\u6240\u6709\u5143\u7d20\u3002"}),"\n",(0,r.jsx)(i.h3,{id:"\u5e0c\u5c14\u6392\u5e8f",children:"\u5e0c\u5c14\u6392\u5e8f"}),"\n",(0,r.jsx)(i.h3,{id:"\u5feb\u901f\u6392\u5e8f",children:"\u5feb\u901f\u6392\u5e8f"}),"\n",(0,r.jsx)(i.p,{children:"\u6392\u5e8f\u601d\u60f3\uff1a\u9009\u62e9\u4e00\u4e2a\u5143\u7d20\u4f5c\u4e3apivot\uff0c\u6bd4pivot\u5c0f\u7684\u653e\u5de6\u8fb9\uff0c\u5927\u4e8e\u7b49\u4e8epivot\u7684\u653e\u53f3\u8fb9\uff0c\u9012\u5f52\u5904\u7406\u5de6\u53f3\u4e24\u8fb9\u7684\u5b50\u5e8f\u5217\u3002"}),"\n",(0,r.jsx)(i.pre,{children:(0,r.jsx)(i.code,{className:"language-java",metastring:'title="QuickSort.java" showLineNumbers',children:"public class QuickSort {\n    public static void main(String[] args) {\n        int[] arr = new int[]{4, 3, 2, 4, 5, 4, 7, 1, 2, 8, 0};\n        quickSort(arr);\n        System.out.println(Arrays.toString(arr));\n    }\n\n    public static void quickSort(int[] arr) {\n        quickSort(arr, 0, arr.length);\n    }\n\n    private static void quickSort(int[] arr, int start, int end) {\n        if (start + 1 >= end) {\n            return;\n        }\n        int mid = partition(arr, start, end);\n        quickSort(arr, start, mid);\n        quickSort(arr, mid + 1, end);\n    }\n\n    private static int partition(int[] arr, int start, int end) {\n        int pivot = arr[start];\n        int index = start + 1; //\u4e0b\u4e00\u4e2a\u5c0f\u5143\u7d20\u5b58\u653e\u4f4d\u7f6e\n        for (int i = index; i < end; i++) {\n            if (arr[i] < pivot) {\n                swap(arr, index, i);\n                index++;\n            }\n        }\n        index--;\n        swap(arr, start, index);\n        return index;\n    }\n\n    private static int partition2(int[] arr, int start, int end) {\n        int pivot = arr[start];\n        int i = start + 1, j = end - 1;\n        while (i < j) {\n            while (i < j && arr[i] < pivot) {\n                i++;\n            }\n            while (i < j && arr[j] >= pivot) {\n                j--;\n            }\n            swap(arr, i, j);\n        }\n        if (arr[i] >= pivot) {\n            i--;\n        }\n        swap(arr, start, i);\n        return i;\n    }\n\n    private static void swap(int[] arr, int i, int j) {\n        if (i != j) {\n            int tmp = arr[i];\n            arr[i] = arr[j];\n            arr[j] = tmp;\n        }\n    }\n}\n"})}),"\n",(0,r.jsx)(i.h3,{id:"\u5f52\u5e76\u6392\u5e8f",children:"\u5f52\u5e76\u6392\u5e8f"}),"\n",(0,r.jsx)(i.p,{children:"\u6392\u5e8f\u601d\u60f3\uff1a\u5bf9\u5e8f\u5217\u8fdb\u884c\u4e00\u5206\u4e3a\u4e8c\u6210\u4e24\u4e2a\u5b50\u5e8f\u5217\uff0c\u5bf9\u4e24\u4e2a\u5b50\u5e8f\u5217\u9012\u5f52\u5904\u7406\uff0c\u5f53\u4e24\u4e2a\u5b50\u5e8f\u5217\u6709\u5e8f\u65f6\uff0c\u5bf9\u4e24\u4e2a\u6709\u5e8f\u5b50\u5e8f\u5217\u8fdb\u884c\u5408\u5e76\u3002"}),"\n",(0,r.jsx)(i.h3,{id:"\u6876\u6392\u5e8f",children:"\u6876\u6392\u5e8f"}),"\n",(0,r.jsx)(i.p,{children:"\u6392\u5e8f\u601d\u60f3\uff1a\u5143\u7d20\u7684\u503c\u8303\u56f4\u8f83\u5c0f\uff0c\u4e14\u5143\u7d20\u503c\u6bd4\u8f83\u8fde\u7eed\uff0c\u5bf9\u503c\u76f8\u540c\u7684\u5143\u7d20\u8fdb\u884c\u8ba1\u6570\uff0c\u6700\u540e\u6309\u6876\u5143\u7d20\u503c\u548c\u8ba1\u6570\u503c\u8fdb\u884c\u4e00\u6b21\u6392\u653e\u3002"}),"\n",(0,r.jsx)(i.h3,{id:"\u8ba1\u6570\u6392\u5e8f",children:"\u8ba1\u6570\u6392\u5e8f"}),"\n",(0,r.jsx)(i.p,{children:"\u6392\u5e8f\u601d\u60f3\uff1a\u7c7b\u4f3c\u4e8e\u6876\u6392\u5e8f\uff0c\u4e0d\u8fc7\u6876\u7684\u503c\u4e0d\u592a\u8fde\u7eed\uff0c\u53ef\u4ee5\u91c7\u7528\u54c8\u5e0c\u8868\u5b58\u50a8\u6bcf\u4e2a\u5143\u7d20\u7684\u4e2a\u6570\uff0c\u6700\u540e\u6309\u6876\u5143\u7d20\u503c\u548c\u8ba1\u6570\u503c\u8fdb\u884c\u4e00\u6b21\u6392\u653e\u3002"}),"\n",(0,r.jsx)(i.h3,{id:"\u57fa\u6570\u6392\u5e8f",children:"\u57fa\u6570\u6392\u5e8f"}),"\n",(0,r.jsx)(i.p,{children:"\u6392\u5e8f\u601d\u60f3\uff1a\u5bf9\u5143\u7d20\u6309\u4f4d\u8fdb\u884c\u5206\u6876\u6392\u5e8f\uff0c\u4f9d\u6b21\u5904\u7406\u4f4e\u4f4d\u5230\u9ad8\u4f4d\uff0c\u6700\u7ec8\u5e8f\u5217\u6709\u5e8f\u3002"}),"\n",(0,r.jsx)(i.h2,{id:"\u53c2\u8003\u8d44\u6599",children:"\u53c2\u8003\u8d44\u6599"}),"\n",(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsx)(i.li,{children:(0,r.jsx)(i.a,{href:"https://javaguide.cn/cs-basics/algorithms/10-classical-sorting-algorithms.html",children:"JavaGuide - \u5341\u5927\u7ecf\u5178\u6392\u5e8f\u7b97\u6cd5"})}),"\n"]})]})}function h(n={}){const{wrapper:i}={...(0,e.R)(),...n.components};return i?(0,r.jsx)(i,{...n,children:(0,r.jsx)(c,{...n})}):c(n)}},28453:(n,i,t)=>{t.d(i,{R:()=>s,x:()=>l});var r=t(96540);const e={},a=r.createContext(e);function s(n){const i=r.useContext(a);return r.useMemo((function(){return"function"==typeof n?n(i):{...i,...n}}),[i,n])}function l(n){let i;return i=n.disableParentContext?"function"==typeof n.components?n.components(e):n.components||e:s(n.components),r.createElement(a.Provider,{value:i},n.children)}}}]);