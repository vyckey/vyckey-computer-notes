"use strict";(self.webpackChunkvyckey_computer_notes=self.webpackChunkvyckey_computer_notes||[]).push([[990],{35485:(e,t,i)=>{i.r(t),i.d(t,{assets:()=>g,contentTitle:()=>r,default:()=>m,frontMatter:()=>h,metadata:()=>a,toc:()=>l});var n=i(74848),s=i(28453);const h={title:"\u5355\u8c03\u6808",tags:["algorithm","problem"],sidebar_label:"\u5355\u8c03\u6808",sidebar_position:10},r="\u5355\u8c03\u6808",a={id:"algorithm/problems/mono_stack",title:"\u5355\u8c03\u6808",description:"\u4e00\u7ef4\u63a5\u96e8\u6c34",source:"@site/docs/algorithm/problems/mono_stack.md",sourceDirName:"algorithm/problems",slug:"/algorithm/problems/mono_stack",permalink:"/docs/algorithm/problems/mono_stack",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/algorithm/problems/mono_stack.md",tags:[{label:"algorithm",permalink:"/docs/tags/algorithm"},{label:"problem",permalink:"/docs/tags/problem"}],version:"current",sidebarPosition:10,frontMatter:{title:"\u5355\u8c03\u6808",tags:["algorithm","problem"],sidebar_label:"\u5355\u8c03\u6808",sidebar_position:10},sidebar:"tutorialSidebar",previous:{title:"Problems",permalink:"/docs/algorithm/problems/"},next:{title:"Diff Array",permalink:"/docs/algorithm/diff_arr"}},g={},l=[{value:"\u4e00\u7ef4\u63a5\u96e8\u6c34",id:"\u4e00\u7ef4\u63a5\u96e8\u6c34",level:2}];function o(e){const t={code:"code",h1:"h1",h2:"h2",li:"li",ol:"ol",pre:"pre",...(0,s.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.h1,{id:"\u5355\u8c03\u6808",children:"\u5355\u8c03\u6808"}),"\n",(0,n.jsx)(t.h2,{id:"\u4e00\u7ef4\u63a5\u96e8\u6c34",children:"\u4e00\u7ef4\u63a5\u96e8\u6c34"}),"\n",(0,n.jsxs)(t.ol,{children:["\n",(0,n.jsx)(t.li,{children:"\u66b4\u529b\u6c42\u89e3\u65b9\u6848\uff1a"}),"\n"]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-java",children:"public class Solution {\n    public static void main(String[] args) {\n        List<Integer> heights = Lists.newArrayList(2, 1, 4, 2, 1, 1, 3, 2, 5, 1, 3, 1, 2);\n        int volume = calVolume(heights);\n        System.out.println(volume);\n    }\n    \n    /**\n     * \u8bbef(i)\u4e3a\u7b2ci\u5217\u7684\u6c34\u67f1\u9ad8\u5ea6\uff0c\u5219\u6709\n     * f(i) = min(max(h[0..i-1]), max(h[i,...]))-h[i], f(i)=max(f(i), 0)\n     */\n    private int calVolume(List<Integer> heights) {\n        if (heights.size() <= 2) {\n            return 0;\n        }\n        // \u4f7f\u7528maxHeights\u7f13\u5b58\u5de6\u53f3\u7684\u6700\u5927\u9ad8\u5ea6\uff0c\u53ef\u964d\u4f4e\u590d\u6742\u5ea6\u5230O(n)\n        // int[][] maxHeights = initMaxHeights(heights);\n\n        int[] water = new int[heights.size()];\n        water[0] = 0;\n        water[heights.size() - 1] = 0;\n        for (int i = 1; i < heights.size() - 1; i++) {\n            // int lh = maxHeights[0][i - 1];\n            // int rh = maxHeights[1][i + 1];\n            int lh = maxHeight(heights, 0, i);\n            int rh = maxHeight(heights, i, heights.size());\n            water[i] = (Math.max(Math.min(lh, rh) - heights.get(i), 0));\n        }\n        return Arrays.stream(water).sum();\n    }\n\n    private int maxHeight(List<Integer> heights, int l, int r) {\n        int max = 0;\n        for (int i = l; i < r; i++) {\n            max = Math.max(max, heights.get(i));\n        }\n        return max;\n    }\n\n    /**\n     * \u521b\u5efamax_heights[2][size]\uff0cmax_heights[0][j]\u8868\u793a\u7b2cj\u4e2a\u4f4d\u7f6e\u5de6\u8fb9\u6700\u5927\u9ad8\u5ea6\uff0cmax_heights[1][j]\u8868\u793a\u7b2cj\u4e2a\u4f4d\u7f6e\u53f3\u8fb9\u6700\u5927\u9ad8\u5ea6\n     * max_heights[0][j+1] = max(max_heights[0][j], heights[j+1])\n     * max_heights[1][j-1] = max(max_heights[1][j], heights[j-1])\n     */\n    private int[][] initMaxHeights(List<Integer> heights) {\n        int[][] maxHeights = new int[2][heights.size()];\n        maxHeights[0][0] = heights.get(0);\n        maxHeights[1][heights.size() - 1] = heights.get(heights.size() - 1);\n        for (int j = 0; j < heights.size() - 1; j++) {\n            int k = heights.size() - j - 1;\n            maxHeights[0][j + 1] = Math.max(maxHeights[0][j], heights.get(j + 1));\n            maxHeights[1][k - 1] = Math.max(maxHeights[1][k], heights.get(k - 1));\n        }\n        return maxHeights;\n    }\n}\n"})}),"\n",(0,n.jsxs)(t.ol,{start:"2",children:["\n",(0,n.jsx)(t.li,{children:"\u4f7f\u7528\u53cc\u6307\u9488\uff1a"}),"\n"]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-java",children:"public class Solution {\n    public static void main(String[] args) {\n        List<Integer> heights = Lists.newArrayList(2, 1, 4, 2, 1, 1, 3, 2, 5, 1, 3, 1, 2);\n        int volume = calVolume(heights);\n        System.out.println(volume);\n    }\n\n    private int calVolume(List<Integer> heights) {\n        if (heights.size() <= 2) {\n            return 0;\n        }\n\n        int left = 0, right = heights.size() - 1;\n        int leftMaxHeight = heights.get(0), rightMaxHeight = heights.get(heights.size() - 1);\n        int volume = 0;\n        while (left <= right) {\n            // \u4e00\u8fb9\u904d\u5386\u4e00\u904d\u8ba1\u7b97\u6700\u5927\u9ad8\u5ea6\n            leftMaxHeight = Math.max(leftMaxHeight, heights.get(left));\n            rightMaxHeight = Math.max(rightMaxHeight, heights.get(right));\n\n            if (leftMaxHeight < rightMaxHeight) {\n                volume += (leftMaxHeight - heights.get(left));\n                left++;\n            } else {\n                volume += (rightMaxHeight - heights.get(right));\n                right--;\n            }\n        }\n        return volume;\n    }\n}\n"})}),"\n",(0,n.jsxs)(t.ol,{start:"3",children:["\n",(0,n.jsx)(t.li,{children:"\u4f7f\u7528\u5355\u8c03\u6808\uff1a"}),"\n"]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-java",children:"public class Solution {\n    public static void main(String[] args) {\n        List<Integer> heights = Lists.newArrayList(2, 1, 4, 2, 1, 1, 3, 2, 5, 1, 3, 1, 2);\n        int volume = calVolume(heights);\n        System.out.println(volume);\n    }\n\n    /**\n     * Stack[..., prev, current] <==push== i ?(heights[current] > heights[i])\n     * or S = w * h = (i-prev-1) * (max(heights[prev],heights[i])-heights[current])\n     */ \n    private int calVolume(List<Integer> heights) {\n        if (heights.size() <= 2) {\n            return 0;\n        }\n\n        int volume = 0;\n        // \u5355\u8c03\u9012\u51cf\n        Deque<Integer> deque = new ArrayDeque<>();\n        for (int i = 0; i < heights.size(); i++) {\n            Integer height = heights.get(i);\n            // \u4fdd\u6301\u5355\u8c03\u9012\u51cf\n            while (!deque.isEmpty() && heights.get(deque.peek()) <= height) {\n                int cur = deque.pop();\n                if (deque.isEmpty()) {\n                    break;\n                }\n                int prev = deque.peek();\n                int w = i - prev - 1;\n                int h = Math.min(heights.get(prev), height) - heights.get(cur);\n                volume += w * h;\n            }\n            deque.push(i);\n        }\n        return volume;\n    }\n}\n"})}),"\n",(0,n.jsx)(t.h1,{id:"\u53c2\u8003\u8d44\u6599",children:"\u53c2\u8003\u8d44\u6599"})]})}function m(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(o,{...e})}):o(e)}},28453:(e,t,i)=>{i.d(t,{R:()=>r,x:()=>a});var n=i(96540);const s={},h=n.createContext(s);function r(e){const t=n.useContext(h);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),n.createElement(h.Provider,{value:t},e.children)}}}]);