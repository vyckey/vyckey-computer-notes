"use strict";(self.webpackChunkvyckey_computer_notes=self.webpackChunkvyckey_computer_notes||[]).push([[8489],{3666:(n,e,r)=>{r.r(e),r.d(e,{assets:()=>u,contentTitle:()=>o,default:()=>d,frontMatter:()=>a,metadata:()=>c,toc:()=>s});var t=r(74848),i=r(28453);const a={title:"Program",tags:["java","concurrent"],sidebar_label:"Program",sidebar_position:10},o="\u591a\u7ebf\u7a0b\u7f16\u7a0b",c={id:"java/concurrent/program",title:"Program",description:"\u751f\u4ea7\u8005\u6d88\u8d39\u8005\u6a21\u5f0f",source:"@site/java/java/concurrent/program.md",sourceDirName:"java/concurrent",slug:"/java/concurrent/program",permalink:"/java/java/concurrent/program",draft:!1,unlisted:!1,tags:[{label:"java",permalink:"/java/tags/java"},{label:"concurrent",permalink:"/java/tags/concurrent"}],version:"current",lastUpdatedBy:"vyckey",lastUpdatedAt:174745298e4,sidebarPosition:10,frontMatter:{title:"Program",tags:["java","concurrent"],sidebar_label:"Program",sidebar_position:10},sidebar:"tutorialSidebar",previous:{title:"AQS",permalink:"/java/java/concurrent/aqs"},next:{title:"ThreadPool",permalink:"/java/java/concurrent/threadpool"}},u={},s=[{value:"\u751f\u4ea7\u8005\u6d88\u8d39\u8005\u6a21\u5f0f",id:"\u751f\u4ea7\u8005\u6d88\u8d39\u8005\u6a21\u5f0f",level:2},{value:"\u4f7f\u7528 <code>wait()</code> \u548c <code>notifyAll()</code>",id:"\u4f7f\u7528-wait-\u548c-notifyall",level:3},{value:"\u4f7f\u7528 <code>BlockingQueue</code> \u5b9e\u73b0",id:"\u4f7f\u7528-blockingqueue-\u5b9e\u73b0",level:3},{value:"\u4f7f\u7528 <code>Semaphore</code> \u5b9e\u73b0",id:"\u4f7f\u7528-semaphore-\u5b9e\u73b0",level:3},{value:"\u4e24\u7ebf\u7a0b\u4ea4\u66ff\u6253\u5370",id:"\u4e24\u7ebf\u7a0b\u4ea4\u66ff\u6253\u5370",level:2},{value:"\u4f7f\u7528 <code>wait()</code> \u548c <code>notify()</code>",id:"\u4f7f\u7528-wait-\u548c-notify",level:3},{value:"\u4f7f\u7528 <code>Thread#yield</code> \u8ba9\u51faCPU",id:"\u4f7f\u7528-threadyield-\u8ba9\u51facpu",level:3},{value:"\u4f7f\u7528 <code>Semaphore</code>",id:"\u4f7f\u7528-semaphore",level:3},{value:"\u4f7f\u7528 <code>CyclicBarrier</code>",id:"\u4f7f\u7528-cyclicbarrier",level:3},{value:"\u4f7f\u7528 <code>BlockingQueue</code>",id:"\u4f7f\u7528-blockingqueue",level:3},{value:"\u4f7f\u7528 <code>ReentrantLock</code>",id:"\u4f7f\u7528-reentrantlock",level:3},{value:"\u8d5b\u8dd1\u6bd4\u8d5b",id:"\u8d5b\u8dd1\u6bd4\u8d5b",level:2},{value:"CountDownLatch",id:"countdownlatch",level:3},{value:"\u53c2\u8003\u8d44\u6599",id:"\u53c2\u8003\u8d44\u6599",level:2}];function l(n){const e={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...n.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.h1,{id:"\u591a\u7ebf\u7a0b\u7f16\u7a0b",children:"\u591a\u7ebf\u7a0b\u7f16\u7a0b"}),"\n",(0,t.jsx)(e.h2,{id:"\u751f\u4ea7\u8005\u6d88\u8d39\u8005\u6a21\u5f0f",children:"\u751f\u4ea7\u8005\u6d88\u8d39\u8005\u6a21\u5f0f"}),"\n",(0,t.jsx)(e.p,{children:"\u95ee\u9898\uff1a\u8bbe\u8ba1\u4e00\u4e2a\u751f\u4ea7\u8005-\u6d88\u8d39\u8005\u6a21\u5f0f\u7684\u7a0b\u5e8f\uff0c\u8981\u6c42\u5bb9\u91cf\u5927\u5c0f\u56fa\u5b9a\u3002\u8bf7\u5b9e\u73b0\u4e0b\u9762\u7684\u63a5\u53e3\uff1a"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-java",metastring:"showLineNumbers",children:"public abstract class ProducerConsumer<T> {\n    protected final int capacity;\n\n    protected ProducerConsumer(int capacity) {\n        this.capacity = capacity;\n    }\n\n    public abstract void produce(Supplier<T> supplier) throws InterruptedException;\n\n    public abstract void consume(Consumer<T> consumer) throws InterruptedException;\n}\n"})}),"\n",(0,t.jsx)(e.p,{children:"\u6d4b\u8bd5\u7a0b\u5e8f\u5982\u4e0b\uff1a"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-java",metastring:"showLineNumbers",children:'public class ProducerConsumerTest {\n    private static final ExecutorService THREAD_POOL = Executors.newScheduledThreadPool(4);\n    private final AtomicInteger integer = new AtomicInteger(1);\n    \n    @Test\n    public void test() throws InterruptedException, ExecutionException {\n        int capacity = 10;\n        ProducerConsumer<Integer> producerConsumer = new ProducerConsumer1<>(capacity);\n        List<Runnable> tasks = Arrays.asList(newProducer(\n            producerConsumer, "1"), newProducer(producerConsumer, "2"),\n            newConsumer(producerConsumer, "1"), newConsumer(producerConsumer, "2"), newConsumer(producerConsumer, "3")\n        );\n        startThreadsInOrder(tasks).get();\n    }\n\n    private Runnable newProducer(ProducerConsumer<Integer> producerConsumer, String name) {\n        return asRunnable(() -> producerConsumer.produce(() -> {\n            System.out.println("producer " + name + ": produce data " + integer.get());\n            return integer.getAndIncrement();\n        }));\n    }\n\n    private Runnable newConsumer(ProducerConsumer<Integer> producerConsumer, String name) {\n        return asRunnable(() -> producerConsumer.consume(i -> {\n            System.out.println("consumer" + name + ": consume data " + i);\n        }));\n    }\n\n    private static CompletableFuture<Void> startThreadsInOrder(List<Runnable> tasks) {\n        CompletableFuture<Void>[] futures = new CompletableFuture[tasks.size()];\n        for (int i = 0; i < tasks.size(); i++) {\n            final Runnable task = tasks.get(i);\n            CompletableFuture<Void> future = CompletableFuture.runAsync(task, THREAD_POOL);\n            futures[i] = future;\n        }\n        return CompletableFuture.allOf(futures);\n    }\n\n    private static Runnable asRunnable(Executable executable) {\n        return () -> {\n            try {\n                executable.execute();\n            } catch (Exception e) {\n                Thread.currentThread().interrupt();\n            }\n        };\n    }\n\n    @FunctionalInterface\n    public interface Executable {\n        void execute() throws Exception;\n    }\n}\n'})}),"\n",(0,t.jsxs)(e.h3,{id:"\u4f7f\u7528-wait-\u548c-notifyall",children:["\u4f7f\u7528 ",(0,t.jsx)(e.code,{children:"wait()"})," \u548c ",(0,t.jsx)(e.code,{children:"notifyAll()"})]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-java",metastring:"showLineNumbers",children:"public class ProducerConsumerImpl<T> extends ProducerConsumer<T> {\n    private final Object lock = new Object();\n    private final Queue<T> queue = new LinkedList<>();\n    private volatile int size = 0;\n\n    public ProducerConsumerImpl(int capacity) {\n        super(capacity);\n    }\n\n    @Override\n    public void produce(Supplier<T> supplier) throws InterruptedException {\n        while (true) {\n            Thread.sleep(1000);\n            synchronized (lock) {\n                while (size >= capacity) {\n                    lock.wait();\n                }\n                queue.offer(supplier.get());\n                ++size;\n                lock.notifyAll();\n            }\n        }\n    }\n\n    @Override\n    public void consume(Consumer<T> consumer) throws InterruptedException {\n        while (true) {\n            Thread.sleep(1200);\n            synchronized (lock) {\n                while (size <= 0) {\n                    lock.wait();\n                }\n                consumer.accept(queue.poll());\n                --size;\n                lock.notifyAll();\n            }\n        }\n    }\n}\n"})}),"\n",(0,t.jsx)(e.p,{children:"\u8f93\u51fa\u7ed3\u679c\uff1a"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{children:"consumer2: consume data 4\nproducer 1: produce data 5\nproducer 2: produce data 6\nconsumer1: consume data 5\nconsumer2: consume data 6\nproducer 1: produce data 7\nproducer 2: produce data 8\nconsumer2: consume data 7\nconsumer1: consume data 8\nproducer 1: produce data 9\nproducer 2: produce data 10\nconsumer2: consume data 9\nconsumer1: consume data 10\nproducer 1: produce data 11\nproducer 2: produce data 12\n"})}),"\n",(0,t.jsxs)(e.h3,{id:"\u4f7f\u7528-blockingqueue-\u5b9e\u73b0",children:["\u4f7f\u7528 ",(0,t.jsx)(e.code,{children:"BlockingQueue"})," \u5b9e\u73b0"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-java",metastring:"showLineNumbers",children:"public class ProducerConsumerImpl<T> extends ProducerConsumer<T> {\n    private final BlockingQueue<T> queue;\n\n    public ProducerConsumerImpl(int capacity) {\n        super(capacity);\n        this.queue = new ArrayBlockingQueue<>(capacity);\n    }\n\n    @Override\n    public void produce(Supplier<T> supplier) throws InterruptedException {\n        while (true) {\n            Thread.sleep(1000);\n            queue.put(supplier.get());\n        }\n    }\n\n    @Override\n    public void consume(Consumer<T> consumer) throws InterruptedException {\n        while (true) {\n            Thread.sleep(1200);\n            consumer.accept(queue.take());\n        }\n    }\n}\n"})}),"\n",(0,t.jsxs)(e.h3,{id:"\u4f7f\u7528-semaphore-\u5b9e\u73b0",children:["\u4f7f\u7528 ",(0,t.jsx)(e.code,{children:"Semaphore"})," \u5b9e\u73b0"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-java",metastring:"showLineNumbers",children:"public class ProducerConsumerImpl<T> extends ProducerConsumer<T> {\n    private final Semaphore mutex;\n    private final Semaphore size;\n    private final Semaphore empty;\n    private final Queue<T> queue = new LinkedList<>();\n\n    public ProducerConsumerImpl(int capacity) {\n        super(capacity);\n        this.mutex = new Semaphore(1);\n        this.size = new Semaphore(capacity);\n        this.empty = new Semaphore(0);\n    }\n\n    @Override\n    public void produce(Supplier<T> supplier) throws InterruptedException {\n        while (true) {\n            Thread.sleep(1000);\n            try {\n                mutex.acquire();\n                size.acquire();\n                queue.offer(supplier.get());\n            } finally {\n                empty.release();\n                mutex.release();\n            }\n        }\n    }\n\n    @Override\n    public void consume(Consumer<T> consumer) throws InterruptedException {\n        while (true) {\n            Thread.sleep(1200);\n            try {\n                mutex.acquire();\n                empty.acquire();\n                consumer.accept(queue.poll());\n            } finally {\n                size.release();\n                mutex.release();\n            }\n        }\n    }\n}\n"})}),"\n",(0,t.jsx)(e.h2,{id:"\u4e24\u7ebf\u7a0b\u4ea4\u66ff\u6253\u5370",children:"\u4e24\u7ebf\u7a0b\u4ea4\u66ff\u6253\u5370"}),"\n",(0,t.jsxs)(e.p,{children:["\u95ee\u9898\uff1a\u4e24\u4e2a\u7ebf\u7a0b\u5171\u540c\u5f15\u7528\u4e00\u4e2a ",(0,t.jsx)(e.code,{children:"FooBar"})," \u7c7b\u5b9e\u4f8b\uff0c\u5b9e\u73b0\u4e24\u4e2a\u7ebf\u7a0b\u4ea4\u66ff\u6309\u987a\u5e8f\u6253\u5370 ",(0,t.jsx)(e.code,{children:'"foo"'})," \u548c ",(0,t.jsx)(e.code,{children:'"bar"'})," \uff0c\u6253\u5370 ",(0,t.jsx)(e.code,{children:"n"})," \u6b21\u3002"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-java",metastring:"showLineNumbers",children:'class FooBar {\n  public void foo() {\n    for (int i = 0; i < n; i++) {\n      print("foo");\n    }\n  }\n\n  public void bar() {\n    for (int i = 0; i < n; i++) {\n      print("bar");\n    }\n  }\n}\n'})}),"\n",(0,t.jsx)(e.p,{children:"\u6d4b\u8bd5\u4ee3\u7801\u5982\u4e0b\uff1a"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-java",metastring:"showLineNumbers",children:'public class FooBarTest {\n    private static final ExecutorService THREAD_POOL = Executors.newScheduledThreadPool(4);\n\n    @Test\n    public void test() throws InterruptedException, ExecutionException {\n        int n = 10;\n        List<String> list = new Vector<>();\n        FooBar fooBar = new FooBar(n);\n        List<Runnable> tasks = Arrays.asList(\n            asRunnable(() -> fooBar.foo(() -> {System.out.println("foo");list.add("foo"); })),\n            asRunnable(() -> fooBar.bar(() -> {System.out.println("bar");list.add("bar"); }))\n        );\n        startThreadsInOrder(tasks).get();\n\n        List<String> expect = new ArrayList<>(n << 1);\n        for (int i = 0; i < n; i++) {\n            expect.add("foo");\n            expect.add("bar");\n        }\n        Assert.assertEquals(expect, list);\n    }\n\n    private static CompletableFuture<Void> startThreadsInOrder(List<Runnable> tasks) {\n        CompletableFuture<Void>[] futures = new CompletableFuture[tasks.size()];\n        for (int i = 0; i < tasks.size(); i++) {\n            final Runnable task = tasks.get(i);\n            CompletableFuture<Void> future = CompletableFuture.runAsync(task, THREAD_POOL);\n            futures[i] = future;\n        }\n        return CompletableFuture.allOf(futures);\n    }\n\n    private static Runnable asRunnable(Executable executable) {\n        return () -> {\n            try {\n                executable.execute();\n            } catch (Exception e) {\n                e.printStackTrace();\n            }\n        };\n    }\n\n    @FunctionalInterface\n    public interface Executable {\n        void execute() throws Exception;\n    }\n}\n'})}),"\n",(0,t.jsxs)(e.h3,{id:"\u4f7f\u7528-wait-\u548c-notify",children:["\u4f7f\u7528 ",(0,t.jsx)(e.code,{children:"wait()"})," \u548c ",(0,t.jsx)(e.code,{children:"notify()"})]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-java",metastring:"showLineNumbers",children:"class FooBar {\n    private final Object lock = new Object();\n    private volatile boolean first = true;\n    private final int n;\n\n    public FooBar(int n) {\n        this.n = n;\n    }\n\n    public void foo(Runnable printFoo) throws InterruptedException {\n        for (int i = 0; i < n; i++) {\n            synchronized(lock) {\n                while (!first) {\n                    lock.wait();\n                }\n                printFoo.run();\n                first = false;\n                lock.notify();\n            }\n        }\n    }\n\n    public void bar(Runnable printBar) throws InterruptedException {\n        for (int i = 0; i < n; i++) {\n            synchronized(lock) {\n                while (first) {\n                    lock.wait();\n                }\n                printBar.run();\n                first = true;\n                lock.notify();\n            }\n        }\n    }\n}\n"})}),"\n",(0,t.jsxs)(e.h3,{id:"\u4f7f\u7528-threadyield-\u8ba9\u51facpu",children:["\u4f7f\u7528 ",(0,t.jsx)(e.code,{children:"Thread#yield"})," \u8ba9\u51faCPU"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-java",metastring:"showLineNumbers",children:"class FooBar {\n    private volatile boolean first = true;\n    private int n;\n\n    public FooBar(int n) {\n        this.n = n;\n    }\n\n    public void foo(Runnable printFoo) throws InterruptedException {\n        for (int i = 0; i < n;) {\n            if (first) {\n                printFoo.run();\n                i++;\n                first = false;\n            } else {\n                Thread.yield();\n            }\n        }\n    }\n\n    public void bar(Runnable printBar) throws InterruptedException {\n        for (int i = 0; i < n;) {\n            if (!first) {\n                printBar.run();\n                i++;\n                first = true;\n            } else {\n                Thread.yield();\n            }\n        }\n    }\n}\n"})}),"\n",(0,t.jsxs)(e.h3,{id:"\u4f7f\u7528-semaphore",children:["\u4f7f\u7528 ",(0,t.jsx)(e.code,{children:"Semaphore"})]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-java",metastring:"showLineNumbers",children:"class FooBar {\n    private final Semaphore foo = new Semaphore(1);\n    private final Semaphore bar = new Semaphore(0);\n    private int n;\n\n    public FooBar(int n) {\n        this.n = n;\n    }\n\n    public void foo(Runnable printFoo) throws InterruptedException {\n        for (int i = 0; i < n; i++) {\n            foo.acquire();\n            printFoo.run();\n            bar.release();\n        }\n    }\n\n    public void bar(Runnable printBar) throws InterruptedException {\n        for (int i = 0; i < n; i++) {\n            bar.acquire();\n            printBar.run();\n            foo.release();\n        }\n    }\n}\n"})}),"\n",(0,t.jsxs)(e.h3,{id:"\u4f7f\u7528-cyclicbarrier",children:["\u4f7f\u7528 ",(0,t.jsx)(e.code,{children:"CyclicBarrier"})]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-java",metastring:"showLineNumbers",children:"class FooBar {\n    private final CyclicBarrier cyclicBarrier = new CyclicBarrier(2);\n    private volatile boolean first = true;\n    private int n;\n\n    public FooBar(int n) {\n        this.n = n;\n    }\n\n    public void foo(Runnable printFoo) throws InterruptedException {\n        for (int i = 0; i < n; i++) {\n            while (!first);\n            printFoo.run();\n            first = false;\n            try {\n                cyclicBarrier.await();\n            } catch (BrokenBarrierException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n\n    public void bar(Runnable printBar) throws InterruptedException {\n        for (int i = 0; i < n; i++) {\n            try {\n                cyclicBarrier.await();\n            } catch (BrokenBarrierException e) {\n                e.printStackTrace();\n            }\n            printBar.run();\n            first = true;\n        }\n    }\n}\n"})}),"\n",(0,t.jsxs)(e.h3,{id:"\u4f7f\u7528-blockingqueue",children:["\u4f7f\u7528 ",(0,t.jsx)(e.code,{children:"BlockingQueue"})]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-java",metastring:"showLineNumbers",children:"class FooBar {\n    private final BlockingQueue<Integer> fooQueue = new LinkedBlockingDeque<>(1);\n    private final BlockingQueue<Integer> barQueue = new LinkedBlockingDeque<>(1);\n    private int n;\n\n    public FooBar(int n) {\n        this.n = n;\n    }\n\n    public void foo(Runnable printFoo) throws InterruptedException {\n        fooQueue.offer(0);\n        for (int i = 0; i < n; i++) {\n            fooQueue.take();\n            printFoo.run();\n            barQueue.offer(i);\n        }\n    }\n\n    public void bar(Runnable printBar) throws InterruptedException {\n        for (int i = 0; i < n; i++) {\n            barQueue.take();\n            printBar.run();\n            fooQueue.offer(i);\n        }\n    }\n}\n"})}),"\n",(0,t.jsxs)(e.h3,{id:"\u4f7f\u7528-reentrantlock",children:["\u4f7f\u7528 ",(0,t.jsx)(e.code,{children:"ReentrantLock"})]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-java",metastring:"showLineNumbers",children:"class FooBar {\n    private final ReentrantLock lock = new ReentrantLock();\n    private final Condition condition = lock.newCondition();\n    private volatile boolean first = true;\n    private int n;\n\n    public FooBar(int n) {\n        this.n = n;\n    }\n\n    public void foo(Runnable printFoo) throws InterruptedException {\n        for (int i = 0; i < n; i++) {\n            try {\n                lock.lock();\n                while (!first) {\n                    condition.await();\n                }\n                printFoo.run();\n                first = false;\n                condition.signal();\n            } finally {\n                lock.unlock();\n            }\n        }\n    }\n\n    public void bar(Runnable printBar) throws InterruptedException {\n        for (int i = 0; i < n; i++) {\n            try {\n                lock.lock();\n                while (first) {\n                    condition.await();\n                }\n                printBar.run();\n                first = true;\n                condition.signal();\n            } finally {\n                lock.unlock();\n            }\n        }\n    }\n}\n"})}),"\n",(0,t.jsx)(e.h2,{id:"\u8d5b\u8dd1\u6bd4\u8d5b",children:"\u8d5b\u8dd1\u6bd4\u8d5b"}),"\n",(0,t.jsx)(e.p,{children:"\u95ee\u9898\uff1a\u4f7f\u7528\u591a\u7ebf\u7a0b\u6a21\u62df\u5b66\u751f\u4e00\u8d77\u6bd4\u8d5b\u8dd1\u6b65\u7684\u8fc7\u7a0b\uff0c\u6307\u4ee4\u5458\u9e23\u67aa\u4e4b\u540e\u5b66\u4e60\u540c\u65f6\u5f00\u59cb\u8d5b\u8dd1\u3002"}),"\n",(0,t.jsx)(e.h3,{id:"countdownlatch",children:"CountDownLatch"}),"\n",(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.code,{children:"CountDownLatch"})," \u521d\u59cb\u5316\u4e3a\u5b66\u751f\u6570\u91cf\u7684\u7ebf\u7a0b\uff0c\u9e23\u67aa\u540e\uff0c\u6bcf\u4e2a\u5b66\u751f\u5c31\u662f\u4e00\u6761\u7ebf\u7a0b\uff0c\u6765\u5b8c\u6210\u5404\u81ea\u7684\u4efb\u52a1\uff0c\u5f53\u7b2c\u4e00\u4e2a\u5b66\u751f\u8dd1\u5b8c\u5168\u7a0b\u540e\uff0c",(0,t.jsx)(e.code,{children:"CountDownLatch"})," \u5c31\u4f1a\u51cf\u4e00\uff0c\u76f4\u5230\u6240\u6709\u7684\u5b66\u751f\u5b8c\u6210\u540e\uff0c",(0,t.jsx)(e.code,{children:"CountDownLatch"})," \u4f1a\u53d8\u4e3a ",(0,t.jsx)(e.code,{children:"0"})," \uff0c\u63a5\u4e0b\u6765\u518d\u4e00\u8d77\u5ba3\u5e03\u8dd1\u6b65\u6210\u7ee9\u3002"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-java",metastring:"showLineNumbers",children:'public class StudentRunRace {\n    private final int studentCount;\n    private final CountDownLatch stopLatch;\n    private final CountDownLatch runLatch;\n\n    StudentRunRace(int studentCount) {\n        this.studentCount = studentCount;\n        this.stopLatch = new CountDownLatch(1);\n        this.runLatch = new CountDownLatch(studentCount);\n    }\n\n    private void waitSignal() throws Exception {\n        System.out.println("\u9009\u624b" + Thread.currentThread().getName() + "\u6b63\u5728\u7b49\u5f85\u88c1\u5224\u53d1\u5e03\u53e3\u4ee4");\n        stopLatch.await();\n        System.out.println("\u9009\u624b" + Thread.currentThread().getName() + "\u5df2\u63a5\u53d7\u88c1\u5224\u53e3\u4ee4");\n        Thread.sleep((long) (Math.random() * 10000));\n        System.out.println("\u9009\u624b" + Thread.currentThread().getName() + "\u5230\u8fbe\u7ec8\u70b9");\n        runLatch.countDown();\n    }\n\n    private void waitStop() throws Exception {\n        Thread.sleep((long) (Math.random() * 10000));\n        System.out.println("\u88c1\u5224" + Thread.currentThread().getName() + "\u5373\u5c06\u53d1\u5e03\u53e3\u4ee4");\n        stopLatch.countDown();\n        System.out.println("\u88c1\u5224" + Thread.currentThread().getName() + "\u5df2\u53d1\u9001\u53e3\u4ee4\uff0c\u6b63\u5728\u7b49\u5f85\u6240\u6709\u9009\u624b\u5230\u8fbe\u7ec8\u70b9");\n        runLatch.await();\n        System.out.println("\u6240\u6709\u9009\u624b\u90fd\u5230\u8fbe\u7ec8\u70b9");\n        System.out.println("\u88c1\u5224" + Thread.currentThread().getName() + "\u6c47\u603b\u6210\u7ee9\u6392\u540d");\n    }\n\n    public void startRace() {\n        ExecutorService service = Executors.newCachedThreadPool();\n        for (int i = 0; i < studentCount; i++) {\n            service.execute(() -> {\n                try {\n                    waitSignal();\n                } catch (Exception e) {\n                    e.printStackTrace();\n                }\n            });\n        }\n        try {\n            waitStop();\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        service.shutdown();\n    }\n\n    public static void main(String[] args) {\n        StudentRunRace studentRunRace = new StudentRunRace(10);\n        studentRunRace.startRace();\n    }\n}\n'})}),"\n",(0,t.jsx)(e.h2,{id:"\u53c2\u8003\u8d44\u6599",children:"\u53c2\u8003\u8d44\u6599"}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsx)(e.li,{children:(0,t.jsx)(e.a,{href:"https://juejin.cn/post/6844903486895865864",children:"\u6398\u91d1 - Java\u5b9e\u73b0\u751f\u4ea7\u8005\u548c\u6d88\u8d39\u8005\u76845\u79cd\u65b9\u5f0f"})}),"\n"]})]})}function d(n={}){const{wrapper:e}={...(0,i.R)(),...n.components};return e?(0,t.jsx)(e,{...n,children:(0,t.jsx)(l,{...n})}):l(n)}},28453:(n,e,r)=>{r.d(e,{R:()=>o,x:()=>c});var t=r(96540);const i={},a=t.createContext(i);function o(n){const e=t.useContext(a);return t.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function c(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(i):n.components||i:o(n.components),t.createElement(a.Provider,{value:e},n.children)}}}]);